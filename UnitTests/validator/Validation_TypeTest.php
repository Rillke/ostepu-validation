<?php

include_once dirname(__FILE__) . '/../../validator/Validation_Type.php';
include_once dirname(__FILE__) . '/../../validator/Validation_Type.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-12-29 at 13:29:08.
 */
class Validation_TypeTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Validation_Type
     */
    protected $object;
    
    protected $simpleInput = array('a'=>2, 'b'=>[1,2,3,4], 'c'=>null, 'd'=>'abc', 'e'=>1.2, 'f'=>'1.2', 'g'=>true, 'h'=>0, 'i'=>1, 'j'=>[]);

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Validation_Type;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Validation_Type::getIndicator
     */
    public function testGetIndicator() {
        self::assertEquals('is', $this->object->getIndicator());
    }
    
    private function simpleListTest($expected, $callback){
        $i=0;
        $elements = array_merge($this->simpleInput, ['999'=>'999']);
        $expected[] = null;
        $input =  $this->simpleInput;
        
        foreach($elements as $key=>$elem){
            $content=null;
            
            if (isset($input[$key])){
                ob_start();
                var_dump($input[$key]);
                $content = ob_get_contents();
                ob_end_clean();
            }
            
            ob_start();
            var_dump($expected[$i]);
            $exp = ob_get_contents();
            ob_end_clean();
            
            self::assertSame($expected[$i], $this->object->$callback($key, $input), '$input['.$key.']='.$content.', erwarte: '.$exp);
            $i++;
        }
    }

    /**
     * @covers Validation_Type::validate_is_float
     */
    public function testValidate_is_float() {
        $this->simpleListTest([null,false,null,false,null,null,false,null,null,false], 'validate_is_float');
    }

    /**
     * @covers Validation_Type::validate_is_boolean
     */
    public function testValidate_is_boolean() {
        $this->simpleListTest([false,false,null,false,false,false,null,false,false,false], 'validate_is_boolean');
    }

    /**
     * @covers Validation_Type::validate_is_integer
     */
    public function testValidate_is_integer() {
        $this->simpleListTest([null,false,null,false,false,false,false,null,null,false], 'validate_is_integer');
    }

    /**
     * @covers Validation_Type::validate_is_string
     */
    public function testValidate_is_string() { 
        $this->simpleListTest([false,false,null,null,false,null,false,false,false,false], 'validate_is_string');     
    }

    /**
     * @covers Validation_Type::validate_is_array
     */
    public function testValidate_is_array() {
        $this->simpleListTest([false,null,null,false,false,false,false,false,false,null], 'validate_is_array');
    }

}
