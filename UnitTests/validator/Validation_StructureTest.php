<?php

include_once dirname(__FILE__) . '/../../validator/Validation_Structure.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-12-29 at 13:28:56.
 */
class Validation_StructureTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Validation_Structure
     */
    protected $object;
    
    protected $simpleInput = array('a'=>2, 'b'=>[1,2,3,4], 'c'=>null, 'd'=>'abc', 'e'=>1.2, 'f'=>'1.2', 'g'=>true, 'h'=>0, 'i'=>1, 'j'=>[]);

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Validation_Structure;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }
    
    private function simpleListTest($expected, $callback, $additionalElements=array()){
        $i=0;
        $elements = array_merge($this->simpleInput, ['999'=>'999']);
        $expected[] = null;
        $input = $this->simpleInput;
        
        foreach($additionalElements as $key => $elem){
            $elements[$key] = $key;
            $expected[] = $elem[1];
            $input[$key] = $elem[0];
        }
        
        foreach($elements as $key=>$elem){
            $content=null;
            
            if (isset($input[$key])){
                ob_start();
                var_dump($input[$key]);
                $content = ob_get_contents();
                ob_end_clean();
            }
            
            ob_start();
            var_dump($expected[$i]);
            $exp = ob_get_contents();
            ob_end_clean();
  
            self::assertSame($expected[$i], $this->object->$callback($key, $input), '$input['.$key.']='.$content.', erwarte: '.$exp);
            $i++;
        }
    }

    /**
     * @covers Validation_Structure::getIndicator
     */
    public function testGetIndicator() {
        self::assertEquals('valid', $this->object->getIndicator());
    }

    /**
     * @covers Validation_Structure::validate_valid_email
     */
    public function testValidate_valid_email() {
        $this->simpleListTest([false,false,null,false,false,false,false,false,false,false],
                'validate_valid_email',
                array('z0'=>['aa@ff.de', null], 'z1'=>['aa@ffde', false], 'z2'=>['aa@ff.', false], 'z3'=>['aa@ff', false], 'z4'=>['aa@', false]));
    }

    /**
     * @covers Validation_Structure::validate_valid_url
     */
    public function testValidate_valid_url() {
        $this->simpleListTest([false,false,null,false,false,false,false,false,false,false],
                'validate_valid_url',
                array('z0'=>['https://aa.de', null], 'z1'=>['http://aa.de', null], 'z2'=>['http://aa', null], 'z3'=>['http://aa/gg', null]));
   }

    /**
     * @covers Validation_Structure::validate_valid_url_query
     */
    public function testValidate_valid_url_query() {
        $this->simpleListTest([false,false,null,false,false,false,false,false,false,false],
                'validate_valid_url_query',
                array('z0'=>['/aa', null], 'z1'=>['/aa/pp', null], 'z2'=>['/aa/aa.html', null]));
   }

    /**
     * @covers Validation_Structure::validate_valid_regex
     */
    public function testValidate_valid_regex() {
        $this->simpleListTest([false,false,null,false,false,false,false,false,false,false],
                'validate_valid_regex',
                array('z0'=>['/^[a-zA-Z0-9+&@#\/%?=~_|!:,.;]*[a-zA-Z0-9+&@#\/%=~_|]$/i', null]));
    }

    /**
     * @covers Validation_Structure::validate_valid_hash
     */
    public function testValidate_valid_hash() {
        $this->simpleListTest([null,false,null,null,false,false,false,null,null,false],
                'validate_valid_hash',
                array('z0'=>['FF', null],'z1'=>['00', null],'z2'=>['AF0BA4848933', null],'z3'=>['G', false],'z4'=>['0G', false]));
    }

    /**
     * @covers Validation_Structure::validate_valid_md5
     */
    public function testValidate_valid_md5() {
        $this->simpleListTest([false,false,null,false,false,false,false,false,false,false],
                'validate_valid_md5',
                array('z0'=>['a3cca2b2aa1e3b5b3b5aad99a8529074', null],'z1'=>['a3cca2b2aa1e3b5b3b5aad99a85290744', false],'z2'=>['a3cca2b2aa1e3b5b3b5aad99a852907', false],'z3'=>['a3cca2b2aa1e3b5b3b5agd99a8529074', false]));
    }

    /**
     * @covers Validation_Structure::validate_valid_sha1
     */
    public function testValidate_valid_sha1() {
        $this->simpleListTest([false,false,null,false,false,false,false,false,false,false],
                'validate_valid_sha1',
                array('z0'=>['68ac906495480a3404beee4874ed853a037a7a8f', null],'z1'=>['68ac906495480a3404beee4874ed853a037a7a8ff', false],'z2'=>['68ac906495480a3404beee4874ed853a037a7a8', false],'z3'=>['68ac906495480a3404beeg4874ed853a037a7a8f', false]));
    }

    /**
     * @covers Validation_Structure::validate_valid_identifier
     */
    public function testValidate_valid_identifier() {
        $this->simpleListTest([null,false,null,null,false,false,false,null,null,false],
                'validate_valid_identifier',
                array('z0'=>['24153', null],'z1'=>['24153_', null],'z2'=>['_24153', null],'z3'=>['24153_1', null]));
    }

    /**
     * @covers Validation_Structure::validate_valid_user_name
     */
    public function testValidate_valid_user_name($function = 'validate_valid_user_name') {
        $this->simpleListTest([false,false,null,null,false,false,false,false,false,false],
                $function,
                array('z0'=>['24153', null],'z1'=>['24153_', false],'z2'=>['acfmr', null],'z3'=>['acfmr1', null]));
    }

    /**
     * @covers Validation_Structure::validate_valid_userName
     */
    public function testValidate_valid_userName() {
        $this->testValidate_valid_user_name('validate_valid_userName');
    }

    /**
     * @covers Validation_Structure::validate_valid_timestamp
     */
    public function testValidate_valid_timestamp() {
        $this->simpleListTest([null,false,null,false,false,false,false,null,null,false],
                'validate_valid_timestamp',
                array('z0'=>['1514640936', null],'z1'=>[2147483647, null],'z2'=>[-2147483648 , null],'z3'=>['0', null]));
    }

    /**
     * @covers Validation_Structure::validate_valid_alpha
     */
    public function testValidate_valid_alpha() {
        $this->simpleListTest([false,false,null,null,false,false,false,false,false,false],
                'validate_valid_alpha',
                array('z0'=>['azAZ', null],'z1'=>['a ', false]));
    }

    /**
     * @covers Validation_Structure::validate_valid_alpha_space
     */
    public function testValidate_valid_alpha_space() {
        $this->simpleListTest([false,false,null,null,false,false,false,false,false,false],
                'validate_valid_alpha_space',
                array('z0'=>['azAZ', null],'z1'=>['a ', null]));
    }

    /**
     * @covers Validation_Structure::validate_valid_integer
     */
    public function testValidate_valid_integer() {
        $this->simpleListTest([null,false,null,false,false,false,false,null,null,false],
                'validate_valid_integer',
                array('z0'=>['2147483647', null],'z1'=>[2147483647, null],'z2'=>[-2147483648, null],'z3'=>['-2147483648', null]));
    }

    /**
     * @covers Validation_Structure::validate_valid_alpha_numeric
     */
    public function testValidate_valid_alpha_numeric() {
        $this->simpleListTest([false,false,null,null,false,false,false,false,false,false],
                'validate_valid_alpha_numeric',
                array('z0'=>['azAZ', null],'z1'=>['a ', false],'z2'=>['a1', null]));
    }

    /**
     * @covers Validation_Structure::validate_valid_alpha_space_numeric
     */
    public function testValidate_valid_alpha_space_numeric() {
        $this->simpleListTest([false,false,null,null,false,false,false,false,false,false],
                'validate_valid_alpha_space_numeric',
                array('z0'=>['azAZ', null],'z1'=>['a ', null],'z2'=>['a1', null],'z3'=>['a 1', null]));
    }

    /**
     * @covers Validation_Structure::validate_valid_json
     */
    public function testValidate_valid_json() {
        $this->simpleListTest([false,false,null,false,false,false,false,false,false,false],
                'validate_valid_json',
                array('z0'=>['{}', null],'z1'=>['{"id":1}', null],'z2'=>['', null],'z3'=>['[]', null],
                    'z4'=>['{', false],'z5'=>['{"id":}', false],'z6'=>['{"id":{}', false]));
    }

}
